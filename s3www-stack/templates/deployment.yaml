apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "s3www.fullname" . }}
  labels:
    {{- include "s3www.commonLabels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount | default 1 }}
  selector:
    matchLabels:
      {{- include "s3www.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "s3www.commonLabels" . | nindent 8 }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.metrics.port }}"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: {{ include "s3www.serviceAccountName" . }}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      {{- if .Values.fileToServe.initContainer.enabled }}
      initContainers:
        - name: init-minio
          image: curlimages/curl
          env:
            - name: MC_CONFIG_DIR
              value: /tmp/data/.mc
          command:
            - /bin/sh
            - -c
            - |
              mkdir -p /tmp/data/.mc
              cd /tmp/data
              curl -L {{ .Values.fileToServe.sourceUrl }} -o file-to-serve
              curl https://dl.min.io/client/mc/release/linux-amd64/mc -o mc
              chmod +x mc
              ./mc alias set minio http://{{ .Values.minio.endpoint }} {{ .Values.minio.rootUser }} {{ .Values.minio.rootPassword }}
              ./mc mb minio/{{ .Values.minio.bucket }} || true
              ./mc cp file-to-serve minio/{{ .Values.minio.bucket }}/giphy.gif
          securityContext:
            runAsUser: 1000
            runAsNonRoot: true
          volumeMounts:
            - name: tmp-data
              mountPath: /tmp/data
      volumes:
        - name: tmp-data
          emptyDir: {}
      {{- end }}
      containers:
        - name: s3www
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
            - "-endpoint"
            - "http://{{ .Values.minio.endpoint }}"
            - "-bucket"
            - "{{ .Values.minio.bucket }}"
            - "-accessKey"
            - "{{ .Values.minio.rootUser }}"
            - "-secretKey"
            - "{{ .Values.minio.rootPassword }}"
            - "-address"
            - "0.0.0.0:8080"
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: metrics
              containerPort: {{ .Values.metrics.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 64Mi
